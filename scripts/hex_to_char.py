#!/usr/bin/env python3
"""
Transforms a textual hex dump block into a C-style byte array declaration.
Used to create `char` blocks that can be included as input data in file
https://github.com/mantidproject/mantid/blob/main/Framework/LiveData/test/ADARAPackets.h

Example:

$> adara-parser --hex m00000001-f00000001.adara | grep "1117010879.984510667 BANKED EVENT DATA" -A 19
1117010879.984510667 BANKED EVENT DATA (0x4000,v1) [216 bytes]
    cycle 122 charge 23237040pC energy 1299981151eV vetoFlags 0x4
    flags ERROR PARTIAL GOT_METADATA GOT_NEUTRONS
    Source 00000000 nBanks 2 intrapulse 0ns tofOffset 0ns (raw)
    Bank 0xfffffffe (18 events)
    Bank 0x1 (1 events)
0000: c8 00 00 00 01 00 40 00 bf 3b 94 42 cb 70 ae 3a
0010: f8 74 23 00 5f 23 7c 4d 7a 00 00 00 03 03 40 00
0020: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00
0030: fe ff ff ff 12 00 00 00 d1 46 02 00 00 00 00 80
0040: d4 48 02 00 00 00 00 80 fc d4 02 00 00 00 00 80
0050: 38 11 03 00 00 00 00 80 b9 24 03 00 00 00 00 80
0060: ba 93 03 00 00 00 00 80 5e e7 03 00 00 00 00 80
0070: e9 fa 03 00 00 00 00 80 40 12 04 00 00 00 00 80
0080: 43 37 04 00 00 00 00 80 dc 67 04 00 00 00 00 80
0090: e9 b3 04 00 00 00 00 80 d1 b4 05 00 00 00 00 80
00a0: a0 dd 05 00 00 00 00 80 a9 02 06 00 00 00 00 80
00b0: 85 04 06 00 00 00 00 80 0d a8 06 00 00 00 00 80
00c0: ea af 06 00 00 00 00 80 01 00 00 00 01 00 00 00
00d0: 66 68 02 00 a4 ee 00 00

We pass it to the script:

$> adara-parser --hex m00000001-f00000001.adara | grep "1117010879.984510667 BANKED EVENT DATA" -A 19| hex_to_char.py
const unsigned char packet[216] = {
  0xc8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x40, 0x00, 0xbf, 0x3b, 0x94, 0x42, 0xcb, 0x70, 0xae, 0x3a,
  0xf8, 0x74, 0x23, 0x00, 0x5f, 0x23, 0x7c, 0x4d, 0x7a, 0x00, 0x00, 0x00, 0x03, 0x03, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0xfe, 0xff, 0xff, 0xff, 0x12, 0x00, 0x00, 0x00, 0xd1, 0x46, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80,
  0xd4, 0x48, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0xfc, 0xd4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x38, 0x11, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xb9, 0x24, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80,
  0xba, 0x93, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x5e, 0xe7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80,
  0xe9, 0xfa, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x12, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x43, 0x37, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0xdc, 0x67, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80,
  0xe9, 0xb3, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0xd1, 0xb4, 0x05, 0x00, 0x00, 0x00, 0x00, 0x80,
  0xa0, 0xdd, 0x05, 0x00, 0x00, 0x00, 0x00, 0x80, 0xa9, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x85, 0x04, 0x06, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0d, 0xa8, 0x06, 0x00, 0x00, 0x00, 0x00, 0x80,
  0xea, 0xaf, 0x06, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x66, 0x68, 0x02, 0x00, 0xa4, 0xee, 0x00, 0x00
};

Notice the `-A 19` option to `grep` which includes 19 lines after the match
so that the entire hex block is captured but no more than that.

"""
import sys
import re

def main():
    hex_lines = []
    in_block = False
    for line in sys.stdin:
        if not in_block:
            if re.match(r'^\s*0000:', line):
                in_block = True
                hex_lines.append(line)
        else:
            if re.match(r'^\s*[0-9a-fA-F]+:', line):
                hex_lines.append(line)
            else:
                break  # Stop at first non-hex line after block starts

    # Extract hex bytes
    hex_bytes = []
    words_per_line = None
    for line in hex_lines:
        line = re.sub(r'^\s*[0-9a-fA-F]+:\s*', '', line)
        words = [w for w in line.strip().split() if re.fullmatch(r'[0-9a-fA-F]{2}', w)]
        if words_per_line is None:
            words_per_line = len(words)
        hex_bytes.extend(words)

    n = len(hex_bytes)
    step =1 if words_per_line is None else 1
    print(f"const unsigned char packet[{n}] = {{")
    for i in range(0, n, step):
        line = '  ' + ', '.join(f"0x{w.lower()}" for w in hex_bytes[i:i+words_per_line])
        if i + words_per_line < n:
            line += ","
        print(line)
    print("};")

if __name__ == "__main__":
    main()
